#!/usr/bin/env escript
-mode(native).

% Reads sqlite3.h and sqlite3.c
% prepends _ to all API functions and data types.

% This is not used but it seems to work.


main(_) ->
	{ok,HFile} = file:read_file("sqlite3.h"),
	{ok,CFile} = file:read_file("sqlite3.c"),
	HLines = binary:split(HFile,<<"\n">>,[global]),
	FuncNames = filter_header(HLines,[{struct,<<"sqlite3_syscall_ptr">>}]),
	file:write_file("_sqlite3.h",replace_lines({0,length(HLines)},HLines,FuncNames,[])),
	CLines = binary:split(CFile,<<"\n">>,[global]),
	file:write_file("_sqlite3.c",replace_lines({0,length(CLines)},CLines,FuncNames,[])),
	ok.

replace_lines({Num,A},L,N,L1) when Num rem 1000 == 0 ->
	io:format("at ~p, out of ~p~n",[Num,A]),
	replace_lines({Num+1,A},L,N,L1);
replace_lines({Num,A},[<<"/*",_/binary>> = H|T],N,L) ->
	replace_lines({Num+1,A},T,N,[[H,$\n]|L]);
replace_lines({Num,A},[<<"//",_/binary>> = H|T],N,L) ->
	replace_lines({Num+1,A},T,N,[[H,$\n]|L]);
replace_lines({Num,A},[<<"**",_/binary>> = H|T],N,L) ->
	replace_lines({Num+1,A},T,N,[[H,$\n]|L]);
replace_lines({Num,A},[H|T],N,L) ->
	replace_lines({Num+1,A},T,N,[[match_names(H,N),$\n]|L]);
replace_lines(_,[],_,L) ->
	lists:reverse(L).

match_names(Line,[H|T]) ->
	case match_name(0,Line,H) of
		Line ->
			match_names(Line,T);
		NLine ->
			% io:format("Matched ~p with ~p~n",[Line,H]),
			match_names(NLine,T)
	end;
match_names(Line,[]) ->
	Line.

match_name(Count,Line,{struct,Name}) when Count < byte_size(Line) ->
	SizeName = byte_size(Name),
	case Line of
		<<Pre:Count/binary,PreChar,Name:SizeName/binary,PostChar,Rem/binary>> when (PreChar == $( orelse PreChar==$\s orelse PreChar==$, orelse PreChar==$* orelse PreChar==$() andalso
																					(PostChar==$* orelse PostChar==$\s orelse PostChar==$) orelse PostChar==$; orelse PostChar==$,) ->
			<<Pre/binary,PreChar,"_",Name/binary,PostChar,(match_name(0,Rem,{struct,Name}))/binary>>;
		<<Name:SizeName/binary,PostChar,Rem/binary>> when PostChar==$*; PostChar==$\s; PostChar==$); PostChar == $; ->
			<<"_",Name/binary,PostChar,(match_name(0,Rem,{struct,Name}))/binary>>;
		<<Pre:Count/binary,"struct ",Name:SizeName/binary," {",Rem/binary>> ->
			<<Pre/binary,"struct _",Name/binary," {",(match_name(0,Rem,{struct,Name}))/binary>>;
		_ ->
			match_name(Count+1,Line,{struct,Name})
	end;
match_name(Count,Line,Name) when Count < byte_size(Line) ->
	SizeName = byte_size(Name),
	case Line of
		<<Pre:Count/binary,Name:SizeName/binary,"(",Rem/binary>> ->
			<<Pre/binary,"_",Name/binary,"(",(match_name(0,Rem,Name))/binary>>;
		<<Pre:Count/binary,Name:SizeName/binary,")",Rem/binary>> ->
			<<Pre/binary,"_",Name/binary,")",(match_name(0,Rem,Name))/binary>>;
		<<Pre:Count/binary,Name:SizeName/binary,"[",Rem/binary>> ->
			<<Pre/binary,"_",Name/binary,"[",(match_name(0,Rem,Name))/binary>>;
		<<Pre:Count/binary,Name:SizeName/binary>> ->
			<<Pre/binary,"_",Name/binary>>;
		<<Pre:Count/binary,Name:SizeName/binary,",",Rem/binary>> ->
			<<Pre/binary,"_",Name/binary,",",(match_name(0,Rem,Name))/binary>>;
		<<Pre:Count/binary,Name:SizeName/binary," ",Rem/binary>> ->
			<<Pre/binary,"_",Name/binary," ",(match_name(0,Rem,Name))/binary>>;
		% <<Pre:Count/binary,Name:SizeName/binary,Rem/binary>> ->
		% 	io:format("Nomatch ~p ~p~n",[Name,Rem]),
		% 	match_name(Count+1,Line,Name);
		_ ->
			match_name(Count+1,Line,Name)
	end;
match_name(_,Line,_) ->
	Line.

filter_header([<<"SQLITE_API ",Decl/binary>>|T],L) ->
	FuncName = find_name(Decl),
	case lists:member(FuncName,L) of
		false ->
			filter_header(T,[FuncName|L]);
		_ ->
			filter_header(T,L)
	end;
filter_header([<<"typedef struct ",Struct/binary>>|T],L) ->	
	case [X || X <- binary:split(Struct,<<" ">>,[global]), X /= <<>>] of
		[StructName|_] ->
			io:format("have struct ~p~n",[StructName]),
			filter_header(T,[{struct,StructName}|L]);
		_ ->
			filter_header(T,L)
	end;
filter_header([_|T],L) ->
	filter_header(T,L);
filter_header([],L) ->
	L.

find_name(<<"sqlite3_int64 ",R/binary>>) ->
	find_name(R);
find_name(<<"sqlite3_temp_directory;">>) ->
	<<"_sqlite3_temp_directory;">>;
find_name(<<"sqlite3_backup ",R/binary>>) ->
	find_name(R);
find_name(<<"sqlite3_mutex ",R/binary>>) ->
	find_name(R);
find_name(<<"sqlite3_vfs ",R/binary>>) ->
	find_name(R);
find_name(<<"sqlite3_column_value ",R/binary>>) ->
	find_name(R);
find_name(<<"sqlite3_",Rem/binary>>) ->
	[FuncName|_] = binary:split(Rem,<<"(">>),
	case binary:split(FuncName,<<" ">>) of
		[NameRem] ->
			<<"sqlite3_",NameRem/binary>>;
		[_Type,<<"sqlite3_",NameRem/binary>>] ->
			<<"sqlite3_",NameRem/binary>>;
		[_Type,<<"*sqlite3_",NameRem/binary>>] ->
			<<"sqlite3_",NameRem/binary>>
	end;
find_name(<<_,R/binary>>) ->
	find_name(R).

